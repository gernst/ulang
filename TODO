TODO

parsing: parse tree data structure
expr: store instantiated type?

test: unit tests
test: publish framework, find a way to integrate with arse
check: all variables are bound in a definition
check: patterns should be exhaustive and disjoint
check: constructor type belongs to the data type
type check: introduce non-generic variables
  (f: a â†’ b allows a and b to be unified currently)
parsing: don't have separate pass for reorder and convert
parsing: allow more free form syntax (if then else, let, where, ...)
parsing: support binders
syntax: generalize top-level definitions with match expressions
syntax: support more top-level effects (i.e., declarations, assert, main)
syntax: support view patterns (limited subset) when the inverse function is obvious
modules: theory + syntax? should be able to reconstruct source
theories: when is it necessary to invalidate?
integration: provide some simple IO and reflection
logic: type invariants (prove when constructing, assume after pattern match)

DONE

theories: find a good model for theory composition
theories: import by name or import by value?
theories: what about f: B if f is exported and (concrete) B not?

parsing: concept of regions (can use whitespace for indentation)

signatures
- during parsing/type checking of a file:
  start with empty (default) signature
  imported, defined symbols
- REPL has a current signature (similarly)
- proofs also need typed variables in the context
- distinguish between imported, defined, exported, local signature
  where local = imported + defined and exported <= defined
- decide whether imports are transitive (better why should they?)
  check what golang does

B import A
  imported B ++= total A
  total B    ++= exported B

B define s
  defined B += s
  
why3 in S:
use T: here T.s, not exported
use import T: here T.s, s, exported as S.T.s
use export T: here s, exported as S.s

this is a
  long line that
    is continued

next line
another line